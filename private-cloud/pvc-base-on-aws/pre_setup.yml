# Copyright 2023 Cloudera, Inc.
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---

- name: Provision AWS infrastructure
  hosts: localhost
  connection: local
  gather_facts: no
  tags: infra
  tasks:
    - name: Set Terraform variables
      ansible.builtin.template:
        dest: tf_proxied_cluster/terraform.tfvars
        src: infra.tfvars.j2
    
    - name: Check for existing Terraform state file
      ansible.builtin.stat:
        path: tf_proxied_cluster/terraform.tfstate
      register: __tf_state

    - name: Establish the infrastructure
      cloud.terraform.terraform:
        project_path: "tf_proxied_cluster/"
        state: "present"
        force_init: "{{ not __tf_state.stat.exists }}"
        provider_upgrade: true

    - name: Establish the Ansible inventory from the infrastructure
      ansible.builtin.meta: refresh_inventory

- name: Ensure inventory readiness
  hosts: all
  gather_facts: no
  tags: always
  tasks:
    - name: Check if host is ready
      ansible.builtin.wait_for_connection:
        timeout: 60

- name: Prepare and mount storage volumes
  hosts: all 
  gather_facts: no
  become: yes
  tags: infra
  tasks:
    - name: Prepare storage volumes
      when: storage_volumes is defined and storage_volumes | length > 0
      ansible.builtin.import_role:
        name: cloudera.exe.mount
      vars:
        mount_volumes: "{{ storage_volumes }}"
        mount_provider: "{{ infra_type }}"

- name: Provision FreeIPA services
  hosts: freeipa
  gather_facts: yes
  become: yes
  tags: freeipa
  vars:
    vpc_cidr: "{{ lookup('cloud.terraform.tf_output', 'vpc', project_path='tf_proxied_cluster')['cidr_block'] }}"
  module_defaults:
    freeipa.ansible_freeipa.ipadnszone:
      ipaadmin_password: "{{ freeipa.ipaadmin_password | default(lookup('env', 'IPA_PASSWORD', default='Undefined')) }}"
    freeipa.ansible_freeipa.ipadnsrecord:
      ipaadmin_password: "{{ freeipa.ipaadmin_password | default(lookup('env', 'IPA_PASSWORD', default='Undefined')) }}"
  tasks:
    - name: Set up the local FreeIPA server
      ansible.builtin.import_role:
        name: cloudera.exe.freeipa_server
      vars:
        ipaserver_hostname: "{{ inventory_hostname }}"
        ipaserver_realm: "{{ freeipa.realm }}"
        ipaserver_domain: "{{ domain }}"
        ipaserver_no_host_dns: yes
        ipaserver_setup_firewalld: no
        ipaserver_setup_dns: yes
        # See https://docs.aws.amazon.com/vpc/latest/userguide/vpc-dns.html
        ipaserver_resolv_nameservers: ["{{ vpc_cidr | ansible.utils.ipmath(2) }}"]
        ipaserver_auto_reverse: yes
        ipaserver_no_forwarders: yes
        ipaserver_forward_policy: only
        ipaserver_recursion_acl_cidr: "{{ vpc_cidr }}"
        ipaserver_copy_csr_to_controller: yes
        ipaclient_mkhomedir: yes
        # TODO Add test for these parameters - error in role is opaque
        ipadm_password: "{{ freeipa.ipaadmin_password | default(lookup('env', 'IPA_PASSWORD', default='Undefined')) }}"
        ipaadmin_password: "{{ freeipa.ipaadmin_password | default(lookup('env', 'IPA_PASSWORD', default='Undefined')) }}"
    
    - name: Create DNS zone for '{{ domain }}' in provisioned FreeIPA service
      freeipa.ansible_freeipa.ipadnszone:
        zone_name: "{{ domain }}"
        dynamic_update: yes
        allow_sync_ptr: yes
        forward_policy: none

    - name: Create reverse DNS zone for '{{ vpc_cidr }}' in provisioned FreeIPA service
      freeipa.ansible_freeipa.ipadnszone:
        name_from_ip: "{{ vpc_cidr }}"
        dynamic_update: yes
        allow_sync_ptr: yes

- name: Register all hosts with local FreeIPA server
  hosts: all:!freeipa
  gather_facts: yes
  become: yes
  tags: freeipa
  tasks:
    - name: Register host with local FreeIPA server
      ansible.builtin.import_role:
        name: cloudera.exe.freeipa_client
      vars:
        ipaserver_domain: "{{ domain }}"
        ipaserver_realm: "{{ freeipa.realm }}"
        ipa_hosts: "{{ groups['freeipa'] }}"
        ipa_server_ips: "{{ groups['freeipa'] | map('extract', hostvars, ['ansible_host']) | list }}"
        ipaadmin_password: "{{ freeipa.ipaadmin_password | default(lookup('ansible.builtin.env', 'IPA_PASSWORD', default='Undefined')) }}"
        ipaadmin_principal: "{{ freeipa.ipaadmin_user | default(lookup('ansible.builtin.env', 'IPA_USER', default=omit)) }}"
        enable_dns: yes  

- name: Establish supporting services resources
  hosts: deployment
  gather_facts: no
  become: yes
  tags: prereq
  tasks:
    - name: Establish additional cluster host requirements
      ansible.builtin.import_role:
        name: cluster_reqs
