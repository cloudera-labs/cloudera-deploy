---

# Copyright 2022 Cloudera, Inc. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# This Playbook is specifically for Deploying Cloudera Clusters
# Edit with extreme caution

# STARTBLOCK # Init run
- name: Init run tasks for Ansible Controller
  hosts: localhost
  gather_facts: yes
  tasks:
    - ansible.builtin.include_role:
        name: cloudera.exe.init_deployment
        public: yes
      when: init__completed is undefined

    - name: Prepare inventory for PvC Plays
      ansible.builtin.include_role:
        name: cloudera.exe.init_deployment
        public: yes
        tasks_from: prep_pvc.yml
  tags:
    - always

- name: Init run tasks for all nodes
  hosts: all
  gather_facts: no
  tasks:
    - name: Group hosts by host template and TLS
      ansible.builtin.include_role:
        name: cloudera.cluster.deployment.groupby

    - name: Check connectivity to Inventory
      ansible.builtin.wait_for_connection:
  tags:
    - always
# ENDBLOCK # Init run

# STARTBLOCK # Verify Inventory and Definition
- name: Verify inventory [verify_inventory]
  hosts: localhost
  gather_facts: no
  roles:
    - cloudera.cluster.verify.inventory
  tags:
    - verify
    - verify_inventory
    - default_cluster
    - full_cluster

- name: Verify definition [verify_definition]
  hosts: cloudera_manager
  gather_facts: no
  roles:
    - cloudera.cluster.verify.definition
  tags:
    - verify
    - verify_definition
    - default_cluster
    - full_cluster

# Moved before parcel verification to allow rehosting
- name: Install custom parcel repository
  hosts: custom_repo
  become: yes
  roles:
    - cloudera.cluster.infrastructure.custom_repo
  tags:
    - custom_repo
    - default_cluster
    - full_cluster

# Moved from verify_parcels to reduce duplication
- name: Verify definition [verify_parcels_and_roles]
  hosts: cloudera_manager
  gather_facts: no
  roles:
    - cloudera.cluster.verify.parcels_and_roles
  tags:
    - verify
    - verify_parcels
    - default_cluster
    - full_cluster

# ENDBLOCK # Verify Inventory and Definition
# STARTBLOCK # Prepare Nodes

- name: Apply OS pre-requisite configurations
  hosts: cloudera_manager, cluster, ca_server, ecs_nodes
  become: yes
  roles:
    - cloudera.cluster.prereqs.os
  tags:
    - os
    - default_cluster
    - full_cluster

- name: Apply OS Prereqs to ECS Nodes
  hosts: ecs_nodes
  gather_facts: yes
  become: yes
  tags:
    - pvc
    - os
    - default_cluster
    - full_cluster
  tasks:
    - name: Setup OS Prereqs for ECS Nodes
      ansible.builtin.include_role:
        name: cloudera.cluster.prereqs.pvc_ecs

    - name: Create user accounts for ECS nodes
      ansible.builtin.include_role:
        name: cloudera.cluster.prereqs.user_accounts_ecs

- name: Create local user accounts
  hosts: cloudera_manager, cluster
  become: yes
  gather_facts: no
  roles:
    - cloudera.cluster.prereqs.user_accounts
  tags:
    - users
    - default_cluster
    - full_cluster

- name: Create local users on ECS Nodes
  hosts: ecs_nodes
  gather_facts: yes
  tags:
    - pvc
    - users
    - default_cluster
    - full_cluster
  tasks:
    - name: Create user accounts for ECS nodes
      ansible.builtin.include_role:
        name: cloudera.cluster.prereqs.user_accounts_ecs

# TODO: add pvc tag to all ecs_nodes plays

- name: Install JDK
  hosts: cloudera_manager, cluster, tls, krb5_server, ecs_nodes
  become: yes
  roles:
    - cloudera.cluster.prereqs.jdk
  tags:
    - jdk
    - security
    - free_ipa
    - kerberos
    - tls
    - default_cluster
    - full_cluster

# STARTBLOCK # Create Cluster Service Infrastructure

- name: Install Kerberos Server
  hosts: krb5_server
  gather_facts: yes
  become: yes
  roles:
    - role: cloudera.cluster.infrastructure.krb5_server
  tags:
    - security
    - kerberos
    - free_ipa
    - tls
    - full_cluster

- name: Setup KRB5 clients
  hosts: cloudera_manager, cluster, ecs_nodes
  gather_facts: yes
  become: yes
  roles:
    - role: cloudera.cluster.infrastructure.krb5_client
      when: "'krb5_server' in groups"
  tags:
    - security
    - kerberos
    - free_ipa
    - tls
    - full_cluster

- name: Install CA server
  hosts: ca_server
  become: yes
  roles:
    - cloudera.cluster.infrastructure.ca_server
  tags:
    - security
    - tls
    - full_cluster

# STARTBLOCK # Prepare TLS

- name: Build TLS keystores and truststores
  hosts: tls
  become: yes
  gather_facts: no
  roles:
    - cloudera.cluster.security.tls_generate_csr
    - cloudera.cluster.security.tls_signing
    - cloudera.cluster.security.tls_install_certs
  vars:
    local_certs_dir: "{{ local_temp_dir }}/certs"
    local_csrs_dir: "{{ local_temp_dir }}/csrs"
  tags:
    - tls
    - full_cluster

- name: Delete temp directories
  hosts: localhost
  become: no
  gather_facts: no
  tasks:
    - file:
        path: "{{ [local_temp_dir, dir] | path_join }}"
        state: absent
      loop:
        - csrs
        - certs
      loop_control:
        loop_var: dir
  tags:
    - always

# ENDBLOCK # Prepare TLS
# STARTBLOCK # NiFi TLS

- name: Setup symlinks for NiFi TLS keystore and truststore
  hosts: cluster
  become: yes
  gather_facts: no
  roles:
    - role: cloudera.cluster.security.tls_nifi
      when: >
        (tls | default(False)
        or manual_tls_cert_distribution | default(False))
        and not (autotls | default(False))
# ENDBLOCK # NiFi TLS
# DB Connectors
- name: Install MySQL Connector
  hosts: cloudera_manager, cluster, ecs_nodes
  gather_facts: no
  become: yes
  roles:
    - role: cloudera.cluster.prereqs.mysql_connector
      when: database_type == 'mysql' or database_type == 'mariadb'
  tags:
    - mysql_connector
    - full_cluster

- name: Install Oracle Connector
  hosts: cloudera_manager, cluster, ecs_nodes
  gather_facts: no
  become: yes
  roles:
    - role: cloudera.cluster.prereqs.oracle_connector
      when: database_type == 'oracle'
  tags:
    - oracle_connector
    - full_cluster

# ENDBLOCK # Prepare Nodes
# STARTBLOCK # Install Cluster Service Infrastructure II

- name: Install RDBMS
  hosts: db_server
  become: yes
  roles:
    - cloudera.cluster.infrastructure.rdbms
  tags:
    - database
    - default_cluster
    - full_cluster

# ENDBLOCK # Install Cluster Service Infrastructure II

- name: Install HAProxy
  hosts: haproxy
  become: yes
  roles:
    - cloudera.cluster.infrastructure.haproxy
  tags:
    - ha
    - full_cluster

# ENDBLOCK # Create Cluster Service Infrastructure
