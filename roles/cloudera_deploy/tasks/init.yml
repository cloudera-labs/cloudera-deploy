---

# Copyright 2021 Cloudera, Inc. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Check versions
- name: Get Python packages
  register: __python_env_packages
  command: pip freeze

- name: Get Ansible Collections
  register: __ansible_collection_list
  command: ansible-galaxy collection list

- name: Get Ansible Roles
  register: __ansible_role_list
  command: ansible-galaxy role list

- name: Log Runtime information
  ansible.builtin.debug:
    msg: "{{ __runtime_item }}"
  loop_control:
    loop_var: __runtime_item
  loop:
    - "Ansible Version: {{ ansible_version }}"
    - "Ansible Collections: {{ __ansible_collection_list.stdout }}"
    - "Ansible Roles: {{ __ansible_role_list.stdout }}"
    - "Python Version: {{ ansible_python_version }}"
    - "Python Packages: {{ __python_env_packages.stdout }}"
    - "Runner Version: '{{ lookup('env', 'CLDR_BUILD_VER') }}'"

# Check path
- name: Check a Definition path has been supplied
  ansible.builtin.assert:
    quiet: yes
    that:
      - definition_path is defined
      - definition_path | length > 0
    fail_msg: "You must supply a 'definition_path' pointing to your artefacts directory"

- name: Check if Definition Path '{{ definition_path }}' exists
  ansible.builtin.stat:
    path: "{{ definition_path }}"
  register: __definition_path_stat

- name: Assert Definition Path is a directory
  ansible.builtin.assert:
    quiet: yes
    fail_msg: "'definition_path' does not appear to point to an existing and reachable directory'"
    that:
      - __definition_path_stat.stat.isdir is defined
      - __definition_path_stat.stat.isdir

# Set File Paths
- name: Set Expected File Paths
  ansible.builtin.set_fact:
    init__user_profile: "{{ abs_profile | default([profile_path | default(default_profile_path), profile | default(default_profile_file)] | path_join ) }}"
    init__definition_file: "{{ abs_definition | default( [definition_path, definition_file | default(default_definition_file)] | path_join ) }}"
    init__cluster_file: "{{ abs_cluster | default( [definition_path, cluster_file | default(default_cluster_file)] | path_join ) }}"
    init__dynamic_inventory_template: "{{ abs_template | default( [definition_path, inventory_template | default(default_inventory_template)] | path_join ) }}"
    init__dynamic_inventory_artefact: "{{ abs_inventory | default( [definition_path, static_inventory | default(default_static_inventory) ] | path_join ) }}"
    init__download_mirror_artefact: "{{ download_mirror_file | default(download_mirror_file) }}"

# Handle User Config
- name: Check for User Config file
  register: __user_config_stat
  ansible.builtin.stat:
    path: "{{ init__user_profile }}"

- name: Load User Config
  when: __user_config_stat.stat.exists
  ansible.builtin.include_vars:
    file: "{{ __user_config_stat.stat.path }}"

# Admin Password
- name: Prompt User for a password if not provided in config or vault
  when: admin_password is undefined or admin_password | length < 2
  block:
    - name: Prompt User for Password if not supplied
      no_log: true
      pause:
        prompt: "No admin password found in profile.yml or extra_vars, or provided password too short; please provide a Password"
      register: __user_input_password

    - name: Set Admin password
      no_log: true
      ansible.builtin.set_fact:
        admin_password: "{{ __user_input_password.user_input }}"

- name: Assert user has supplied an Admin Password
  no_log: true
  ansible.builtin.assert:
    quiet: yes
    that:
      - admin_password is defined
      - admin_password | length > 2
    fail_msg: "You must supply an Admin Password of at least 2 chars"

# Handle Definition File
- name: Seek Definition files in Definition Path
  register: __def_file_stat
  ansible.builtin.stat:
    path: "{{ init__definition_file }}"

- name: Assert that a Definition File has been provided
  ansible.builtin.assert:
    quiet: yes
    that: __def_file_stat.stat.exists
    fail_msg: "Expected to find a definition file '{{ init__definition_file }}' in Definition Path '{{ definition_path }}'"

# User Definition files may contain lazy templating which would break if pre-merged here, therefore the cluster defaults file is kept separate
- name: Select default provided User Definition Files
  ansible.builtin.set_fact:
    init__user_definition_file: "{{ __def_file_stat.stat.path }}"
    init__cluster_definition_file: "{{ __def_file_stat.stat.path }}"

# Handle separate Cluster File
- name: Seek Cluster Definition files in Definition Path
  register: __clus_file_stat
  ansible.builtin.stat:
    path: "{{ init__cluster_file }}"

- name: Include vars to top level for other facts in Definition File
  ansible.builtin.include_vars:
    file: "{{ init__user_definition_file }}"

# Must be included before cluster definition checks as it may have logic control switches
- name: Override with separate Cluster file if provided
  when: __clus_file_stat.stat.exists
  ansible.builtin.set_fact:
    init__cluster_definition_file: "{{ __clus_file_stat.stat.path }}"

# Override with default cluster definition if requested, regardless of files found
- name: Use default cluster definition as override if requested
  when: use_default_cluster_definition | bool
  ansible.builtin.set_fact:
    init__cluster_definition_file: "{{ default_cluster_definition_file }}"

- name: Include vars from User Definition File to private dict to check for Globals
  ansible.builtin.include_vars:
    file: "{{ init__user_definition_file }}"
    name: __def_vars

# Note that this depends on the earlier set_fact for globals to take precedence over include_vars
- name: Include Cluster definition file for current localhost use after User Definition is Loaded
  ansible.builtin.include_vars:
    file: "{{ init__cluster_definition_file }}"

# Merge User Profile to Globals
- name: Marshal User Config into Globals
  ansible.builtin.set_fact:
    globals: "{{ globals | default({}) | combine(user_config , recursive=True) }}"
  vars:
    user_config:
      name_prefix: "{{ name_prefix | default(default_name_prefix) }}"
      tags: "{{ tags | default(omit) }}"
      region: "{{ infra_region | default(default_infra_region) }}"
      infra_type: "{{ infra_type | default(default_infra_type) }}"
      ssh:
        public_key_id: "{{ public_key_id | default(omit) }}"
        public_key_file: "{{ public_key_file | default(omit) }}"
        public_key_text: "{{ public_key_text | default(omit) }}"
        private_key_file: "{{ private_key_file | default(omit) }}"
        key_path: "{{ ssh_key_path | default(default_sshkey_path) }}"
      cloudera_license_file: "{{ license_file | default(omit) }}"
      gcloud_credential_file: "{{ gcloud_credential_file | default(omit) }}"
      env_vars: "{{ env_vars | default(omit) }}"

- name: Merge overwrite globals from Definition file with Globals on User File
  when: __def_vars.globals is defined
  ansible.builtin.set_fact:
    globals: "{{ globals | combine(__def_vars.globals, recursive=True) }}"

# Validate Name Prefix
- name: Check supplied Namespace (Azure)
  when: globals.infra_type == 'azure'
  ansible.builtin.assert:
    that:
      - globals.name_prefix | length > 1
      - globals.name_prefix | length < 5
      - globals.name_prefix | regex_search('^[a-zA-Z]')
    fail_msg: "You must supply a valid Namespace"
    quiet: yes

- name: Check supplied Namespace
  when: globals.infra_type != 'azure'
  ansible.builtin.assert:
    that:
      - globals.name_prefix | length > 1
      - globals.name_prefix | length < 8
      - globals.name_prefix | regex_search('^[a-zA-Z]')
    fail_msg: "You must supply a valid Namespace"
    quiet: yes

# SSH
- name: Use default SSH public key id
  when: globals.ssh.public_key_id is undefined
  ansible.builtin.set_fact:
    globals: "{{ globals | default({}) | combine(__default_ssh_key_id, recursive=True) }}"
  vars:
    __default_ssh_key_id:
      ssh:
        public_key_id: "{{ globals.name_prefix }}"

- name: Generate SSH public and private keys
  when: (globals.ssh.public_key_file is undefined or globals.ssh.public_key_file | length < 3) and globals.ssh.public_key_text is undefined
  block:
    - name: Generate a SSH keypair (public and private keys)
      register: __generated_ssh_keys
      community.crypto.openssh_keypair:
        path: "{{ [default_sshkey_path, __generated_keypair_name] | path_join }}"
        comment: "{{ globals.name_prefix }} (auto-generated)"
        type: rsa
        size: 4096
        regenerate: never
        force: no
      vars:
        __generated_keypair_name: "{{ globals.name_prefix + default_ssh_key_suffix }}"

    - name: Set facts for the generated SSH keypair details
      ansible.builtin.set_fact:
        globals: "{{ globals | default({}) | combine(__generated_keypair, recursive=True) }}"
      vars:
        __generated_keypair:
          ssh:
            private_key_file: "{{ __generated_ssh_keys.filename }}"
            public_key_file: "{{ [ __generated_ssh_keys.filename, 'pub' ] | join('.') }}"

- name: Load SSH public key file to text
  when: globals.ssh.public_key_file is defined
  ansible.builtin.set_fact:
    globals: "{{ globals | default({}) | combine(__public_key_globals , recursive=True) }}"
  vars:
    __public_key_globals:
      ssh:
        public_key_text: "{{ lookup('file', globals.ssh.public_key_file ) | default(omit) }}"

# Read in Dynamic Inventory
- name: Seek Inventory Template in Definition Path
  register: __di_template_stat
  ansible.builtin.stat:
    path: "{{ init__dynamic_inventory_template }}"

# inventory_dir is not defined when a user passes in an inventory with -i, so it is a useful check
# No point loading Dynamic Inventory if we are not doing infrastructure in this run
- name: Handle Dynamic Inventory Template
  when:
    - inventory_dir is defined
    - __di_template_stat.stat.exists
  block:
    - name: Load in Dynamic Inventory Template
      include_tasks: refresh_inventory.yml
      vars:
        include_inventory_file: "{{ __di_template_stat.stat.path }}"

    - name: Print Dynamic Inventory groups to debug at Verbosity 3
      debug:
        msg: "{{ groups }}"
        verbosity: 3

    - name: Check expected minimum host groups appear in Inventory
      ansible.builtin.assert:
        quiet: yes
        that:
          - groups.cluster is defined
          - groups.cloudera_manager is defined
        fail_msg: "Parsed Inventory Template did not contain minimum expected groups for a Cloudera Cluster deployment"

    - name: Check a custom_repo is part of the cluster definition if using Download Mirror
      when: use_download_mirror | default(default_enable_download_mirror) | bool
      ansible.builtin.assert:
        that: "'custom_repo' in groups"
        fail_msg: "You must have a custom_repo in your Cluster Inventory when using Download Mirror"

    - name: Extract list of hosts from Dynamic Inventory Template
      when: groups.all | length > 0
      ansible.builtin.set_fact:
        __dynamic_inventory_host_list: "{{ groups.all | difference(['localhost']) }}"

    - name: Set Dynamic Inventory host count in Globals
      when: __dynamic_inventory_host_list | length > 0
      ansible.builtin.set_fact:
        globals: "{{ globals | default({}) | combine( __di_entry | default(omit), recursive=True ) }}"
      loop_control:
        loop_var: __di_entry
      loop:
        - dynamic_inventory:
            vm:
              count: "{{ __dynamic_inventory_host_list | count }}"
  always:
    - name: Remove Dynamic Inventory Template from current inventory
      include_tasks: refresh_inventory.yml

- name: Add no_log variables to globals
  no_log: true
  ansible.builtin.set_fact:
    globals: "{{ globals | default({}) | combine(__no_log_globals, recursive=True) }}"
  vars:
    __no_log_globals:
      admin_password: "{{ admin_password | mandatory }}"

- name: Set CM facts
  ansible.builtin.set_fact:
    cloudera_manager_license_file: "{{ globals.cloudera_license_file | default(omit) }}"
    cloudera_manager_admin_password: "{{ globals.admin_password }}"
  no_log: true

# Download Mirror
- name: Prepare for Download Mirror Population if requested and necessary
  when:
    - use_download_mirror | default(default_enable_download_mirror) | bool
    - "'teardown' not in ansible_run_tags"
  ansible.builtin.include_role:
    name: cloudera_deploy
    tasks_from: prepare_download_mirror

# Ansible tempfile doesn't appear to work well on ansible-runner
- name: Set local Temp directory if not supplied
  ansible.builtin.set_fact:
    local_temp_dir: "{{ local_temp_dir | default(default_local_temp_dir) }}"

- name: Set GCloud Environment Variables if needed
  when: globals.gcloud_credential_file is defined
  ansible.builtin.set_fact:
    globals: "{{ globals | default({}) | combine( env_gcp_entries, recursive=True ) }}"
  vars:
    env_gcp_entries:
      env_vars:
        GCP_AUTH_KIND: serviceaccount
        GCP_SERVICE_ACCOUNT_FILE: "{{ globals.gcloud_credential_file }}"

- name: Set Profile Env Vars if required
  ansible.builtin.set_fact:
    globals: "{{ globals | default({}) | combine( env_var_entries, recursive=True ) }}"
  vars:
    env_var_entries:
      env_vars:
        CDP_PROFILE: "{{ globals.cdp_profile | default(omit) }}"
        AWS_PROFILE: "{{ globals.aws_profile | default(omit) }}"
        AWS_REGION: "{{ globals.region | default(omit) }}"

- name: Print globals to debug at end of init (verbosity 3)
  ansible.builtin.debug:
    msg: "{{ globals }}"
    verbosity: 3

- name: Determine if Cloud Roles should be called
  ansible.builtin.set_fact:
    init__call_cloud_role: "{{ infra is defined or env is defined or ml is defined or de is defined or datahub is defined or opdb is defined or dw is defined | default(False) }}"
    init__call_cdp_public: "{{ env is defined or ml is defined or de is defined or datahub is defined or opdb is defined or dw is defined | default(False) }}"

- name: Check Admin Password is CDP Public compliant when calling CDP Public
  when: init__call_cdp_public | bool
  ansible.builtin.assert:
    that:
      - admin_password is match('^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,64}$')
    fail_msg: >-
      Admin Password must comply with CDP Public requirements: 1 Upper, 1 Special, 1 Number, 8-64 chars.
    quiet: yes

